#version 460 core

layout (local_size_x = 16, local_size_y = 16) in;

#define USE_SDF_GRADIENT
#include SdfFunction
#include LightUtils

#define MAX_ITERATIONS 1024

layout(rgba32f, binding = 0) uniform image2D outputTexture;

// Camera properties
uniform vec2 pixelToView;
uniform vec2 nearPlaneHalfSize;
uniform vec2 nearAndFarPlane;
uniform mat4 invViewModelMatrix;

uniform float distanceScale;
uniform float minBorderValue;

vec3 mapGradient(vec3 pos)
{
    vec3 distToBox = abs(pos - vec3(0.5));
    if(max(max(distToBox.x, distToBox.y), distToBox.z) > 0.4999)
    {
        return vec3(0.0);
    }
    return normalize(getGradient(pos));
}

vec3 mapColor(vec3 pos, vec3 cameraPos)
{
    float metallic = 0.1;
    float roughness = 0.7;
    vec3 albedo = vec3(26.0 / 255.0, 1.0, 102.0 / 255.0);
    vec3 F0 = vec3(0.07, 0.07, 0.07); 
    vec3 lightPos = vec3(0.873572, 1.42857, 1.09321);
    vec3 sunColor = 10.0 * vec3(1.0, 0.8, 0.6); // Mix light color and intensity

    vec3 N = mapGradient(pos);
    vec3 V = normalize(cameraPos - pos);

    F0 = mix(F0, albedo, metallic);

    vec3 Lo = vec3(0.0);
    vec3 lightsPos[2] = vec3[2](lightPos, cameraPos);
    float lightsIntensity[2] = float[2](1.0, 0.3);
    // Directional light
    for(int i=0; i < 2; i++)
    {
        // Light position
        float distToLight = length(lightsPos[i] - pos);

        vec3 L = normalize(lightsPos[i] - pos);
        vec3 H = normalize(V + L);
        float intensity = lightsIntensity[i];
        vec3 radiance = sunColor * intensity;
        
        // Cook-torrance brdf
        float NDF = DistributionGGX(N, H, roughness);        
        float G = GeometrySmith(N, V, L, roughness);      
        vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);       
        
        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - metallic;	  
        
        vec3 numerator = NDF * G * F;
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;
        vec3 specular = numerator / denominator;  
            
        // Add to outgoing radiance Lo
        float NdotL = max(dot(N, L), 0.0);                
        Lo += (kD * albedo / PI + specular) * radiance * NdotL;
    }

    vec3 ambient = vec3(0.5) * albedo; // Ambient light estimation
    vec3 color = ambient + Lo;

    color = color / (color + vec3(1.0));
    color = pow(color, vec3(1.0/2.2));  

    return color;
}

float map(vec3 pos)
{
    float distToGrid = 0.0;
    float nodeRelativeLength;
    vec3 distToBox = abs(pos - vec3(0.5));
    if(max(max(distToBox.x, distToBox.y), distToBox.z) > 0.4999)
    {
        // return length(max(distToBox - vec3(0.5), vec3(0.0))) + distanceScale * minBorderValue; 
        return length(max(distToBox - vec3(0.5), vec3(0.0))) + 0.01;
    }
    return distanceScale * getDistance(pos, distToGrid, nodeRelativeLength);
}

bool raycast(vec3 startPos, vec3 dir, out vec3 resultPos)
{
    float accDistance = 0.0;
    resultPos = startPos;
    float lastDistance = 1e8;
    uint it = 0;
    while (lastDistance > 1e-5 && accDistance < nearAndFarPlane.y && it < MAX_ITERATIONS)
    {
        resultPos = startPos + dir * accDistance;
        lastDistance = map(resultPos);
        float dist = max(lastDistance, 0.0);
        accDistance += dist;
        it += 1;
    }
    return lastDistance <= 1e-5;
}

void main()
{
    uvec2 pCoord = gl_GlobalInvocationID.xy;
    vec3 pixelPos = vec3((vec2(pCoord) + vec2(0.5)) * pixelToView - nearPlaneHalfSize, -nearAndFarPlane.x);

    vec3 worldPos = vec3(invViewModelMatrix * vec4(vec3(0.0), 1.0));
    vec3 worldDir = normalize(vec3(invViewModelMatrix * vec4(pixelPos, 1.0)) - worldPos);

    vec3 outColor = vec3(0.9);
    
    vec3 hitPoint;
    if(raycast(worldPos, worldDir, hitPoint))
    {
        outColor = mapColor(hitPoint, worldPos);
    }

    imageStore(outputTexture, ivec2(pCoord), vec4(outColor, 1.0));
}